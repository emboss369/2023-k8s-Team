- name: assert [ AWS_ACCESS_KEY_ID ]
  assert:
    that: lookup('env', 'AWS_ACCESS_KEY_ID') != ""
    fail_msg: "[ERROR] Please set AWS_ACCESS_KEY_ID"
    success_msg: "AWS_ACCESS_KEY_ID={{lookup('env', 'AWS_ACCESS_KEY_ID')}}"

- name: assert [ AWS_SECRET_ACCESS_KEY ]
  assert:
    that: lookup('env', 'AWS_SECRET_ACCESS_KEY') != ""
    fail_msg: "[ERROR] Please set AWS_SECRET_ACCESS_KEY"
    success_msg: "AWS_SECRET_ACCESS_KEY={{lookup('env', 'AWS_SECRET_ACCESS_KEY')}}"

- name: Install jq
  ansible.builtin.apt:
    name: jq
    state: present
  become: true

- name: Install nodejs
  ansible.builtin.apt:
    pkg:
    - nodejs
    - npm
    state: present
  become: true

- name: Update Node.js to Latest Version
  ansible.builtin.shell: |
    npm -g install n
    n stable
  become: true

# - name: Install AWS CDK
#   ansible.builtin.shell: sudo npm install -g aws-cdk
#   become: true

- name: Uninstall AWS CLI
  ansible.builtin.shell: |
    sudo rm /usr/local/bin/aws
    sudo rm /usr/local/bin/aws_completer
    sudo rm -rf /usr/local/aws-cli
    sudo rm -rf ~/.aws/
  become: true
  register: result

- debug:
    msg: result

- name: Install AWS CLI aarch64
  ansible.builtin.shell: |
    cd
    curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
    unzip -o awscliv2.zip
    sudo ./aws/install
    rm awscliv2.zip
  become: true
  when: ansible_architecture == "aarch64"

- name: Install AWS CLI x86_64
  ansible.builtin.shell: |
    cd
    curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
    unzip -o awscliv2.zip
    sudo ./aws/install
    rm awscliv2.zip
  become: true
  when: ansible_architecture == "x86_64"

- name: Create credential directory 
  file:
    path: "{{ lookup('ansible.builtin.env','HOME') }}/.aws/"
    state: directory
    mode: "775"

- name: Configure your AWS credentials
  template:
    src: credentials.j2
    dest: "{{ lookup('ansible.builtin.env','HOME') }}/.aws/credentials"
    mode: 0664

- name: Configure your AWS config file
  template:
    src: config.j2
    dest: /home/opeadmin/.aws/config
    mode: 0664

# aws iot create-thing --thing-name k3s_iot_client
# https://docs.aws.amazon.com/cli/latest/reference/iot/create-thing.html
- name: Create Thing
  ansible.builtin.shell: 
    cmd: 'aws iot create-thing --thing-name {{ IOT_THING_NAME }}'
  args:
    chdir: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible"
  register: result

- debug:
    msg: result

- name: Check certification cert.json
  stat:
    path: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible/cert/cert.json"
  register: cert

- name: Create certification 
  ansible.builtin.shell: |
    mkdir cert
    aws iot create-keys-and-certificate --set-as-active > ./cert/cert.json
    cat ./cert/cert.json | jq .keyPair.PrivateKey -r > ./cert/private.pem.key
    jq .certificateId ./cert/cert.json > ./cert/certificate-id.txt
    CERTIFICATED_ID=`cat ./cert/certificate-id.txt | sed 's/"//g'`
    aws iot describe-certificate --certificate-id $CERTIFICATED_ID --output text  --query certificateDescription.certificatePem > ./cert/device.pem.crt
  args:
    chdir: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible"
  when: not cert.stat.exists
  register: result

- debug:
    msg: result
  when: not cert.stat.exists

- name: Check created certification
  ansible.builtin.shell: |
    openssl  x509 -text < ./cert/device.pem.crt
  args:
    chdir: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible"
  when: not cert.stat.exists
  register: result

- debug:
    msg: result
  when: not cert.stat.exists

- name: Copy policy templte
  template:
    src: k3s_iot_policy.j2
    dest: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible/policy.json"

# https://docs.aws.amazon.com/cli/latest/reference/iot/delete-policy.html
- name: Delete IoT Policy
  ansible.builtin.shell: 
    cmd: 'aws iot delete-policy --policy-name {{ IOT_POLICY_NAME }}'
  args:
    chdir: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible"
  register: result

# https://docs.aws.amazon.com/cli/latest/reference/iot/create-policy.html
- name: Create IoT Policy
  ansible.builtin.shell: 
    cmd: 'aws iot create-policy --policy-name {{ IOT_POLICY_NAME }} --policy-document file://policy.json'
  args:
    chdir: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible"
  register: result

- debug:
    msg: result

- name: Get IoT Policy
  ansible.builtin.shell: 
    cmd: 'aws iot get-policy --policy-name {{ IOT_POLICY_NAME }} > {{ IOT_POLICY_NAME }}.json'
  args:
    chdir: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible"
  register: result

- debug:
    msg: result

- name: Attach a IoT policy to a certificate
  ansible.builtin.shell: |
    CERTARN=`jq .certificateArn ./cert/cert.json  | sed 's/"//g'`
    aws iot attach-principal-policy --principal $CERTARN --policy-name {{ IOT_POLICY_NAME }}
    aws iot list-principal-policies --principal $CERTARN
    aws iot attach-thing-principal --thing-name {{ IOT_THING_NAME }} --principal $CERTARN
  args:
    chdir: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible"
  register: result

- debug:
    msg: result

- name: Show things principals
  ansible.builtin.shell: |
    CERTARN=`jq .certificateArn ./cert/cert.json  | sed 's/"//g'`
    aws iot list-thing-principals --thing-name {{ IOT_THING_NAME }}
  args:
    chdir: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible"
  register: result

- debug:
    msg: result

- name: Show endpoint
  ansible.builtin.shell: |
    CERTARN=`jq .certificateArn ./cert/cert.json  | sed 's/"//g'`
    aws iot iot describe-endpoint --region {{ AWS_REGION }}
  args:
    chdir: "{{ lookup('ansible.builtin.env','HOME') }}/workspace/2023-k8s-Team/ansible"
  register: result

- debug:
    msg: result

# https://docs.aws.amazon.com/cli/latest/reference/greengrassv2/batch-associate-client-device-with-core-device.html
# batch associate client device with core device
- name: Associate client device with core device
  shell: |
    aws greengrassv2 batch-associate-client-device-with-core-device \
      --core-device-thing-name {{ THING_NAME }} \
      --entries thingName={{ IOT_THING_NAME }} 
  register: result

- debug:
    msg: result
