---
- name: assert [ AWS_ACCESS_KEY_ID ]
  assert:
    that: lookup('env', 'AWS_ACCESS_KEY_ID') != ""
    fail_msg: "[ERROR] Please set AWS_ACCESS_KEY_ID"
    success_msg: "AWS_ACCESS_KEY_ID={{lookup('env', 'AWS_ACCESS_KEY_ID')}}"

- name: assert [ AWS_SECRET_ACCESS_KEY ]
  assert:
    that: lookup('env', 'AWS_SECRET_ACCESS_KEY') != ""
    fail_msg: "[ERROR] Please set AWS_SECRET_ACCESS_KEY"
    success_msg: "AWS_SECRET_ACCESS_KEY={{lookup('env', 'AWS_SECRET_ACCESS_KEY')}}"

- name: check file /usr/local/bin/k3s-uninstall.sh
  stat:
    path: /usr/local/bin/k3s-uninstall.sh
  register: k3s_uninstall

- name: Uninstall kubernetes
  ansible.builtin.command:
    cmd: /usr/local/bin/k3s-uninstall.sh
  when: k3s_uninstall.stat.exists

- name: Install kubernetes
  shell:
    cmd: 'curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--disable-agent" K3S_KUBECONFIG_MODE="644" sh -'

- name: Get token
  ansible.builtin.shell: cat /var/lib/rancher/k3s/server/node-token
  register: k3s_server_token

- name: Print the token 
  ansible.builtin.debug:
    msg: K3S_TOKEN is {{ k3s_server_token }} 
  when: k3s_server_token is defined
  ignore_errors: '{{ ansible_check_mode }}'

- name: check nodes
  shell:
    cmd: 'k3s kubectl get nodes'
  register: k3s_server_nodes

- name: Print the k3s server nodes 
  ansible.builtin.debug:
    msg: k3s server nodes {{ k3s_server_nodes }} 
  when: k3s_server_nodes is defined
  ignore_errors: '{{ ansible_check_mode }}'
